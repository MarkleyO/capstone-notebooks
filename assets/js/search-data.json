{
  
    
        "post0": {
            "title": "Introduction",
            "content": "# Text Classification . &gt; &quot;Chapter 1 - start out with sentiment text classification.&quot; . - toc: true . - branch: master . - badges: false . - comments: false . Text classification is the process of assigning tags or categories to text according to its content. It’s one of the fundamental tasks in natural language processing. . The text we wanna classify is given as input to an algorithm, the algorithm will then analyze the text’s content, and then categorize the input as one of the tags or categories previously given. . Input → Classifying Algorithm → Classification of Input . Real life examples: . Sentiment analysis: how does the writer of the sentence feel about what they are writing about, do they think positively or negatively of the subject? Ex. restaurant reviews topic labeling: given sentences and a set of topics, which topic does this sentence fall under? Ex. is this essay about history? Math? etc? spam detection Ex. Email filtering: is this email a real important email or spam? | . Example. A restaurant wants to evaluate their ratings but don’t want to read through all of them. Therefore, they wanna use a computer algorithm to do all their work. They simply want to know if the customer’s review is positive or negative. . Here’s an example of a customer’s review and a simple way an algorithm could classify their review. . Input: “The food here was too salty and too expensive” . Algorithm: Goes through every word in the sentence and counts how many positive words and how many negative words are in the sentence. . “The, food, here, was, too, and” are all neutral words “Salty, expensive” are negative words. Negative words: 2 Positive words: 0 . Classification: Negative Review, because there are more negative words (2) than positive (0). . However, this algorithm obviously doesn’t work in a lot of cases. . For example, “The food here was good, not expensive and not salty” would be classified as negative but it’s actually a positive review. . Language and text can get very complicated which makes creating these algorithms difficult. Some things that make language difficult could be words that have multiple meanings, negation words (words such as not), slang, etc. . Set up data and imports . Library imports . This section of code is to import any necessary Python libraries that we&#39;ll need for the rest of this notebook. Some packages may need to be installed since they are not built in to Python3. . !pip3 install seaborn import sys import string from scipy import sparse from pprint import pprint import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import numpy as np from IPython.display import display import ipywidgets as widgets # Our two files that contain our data, split up into a training set and a testing set. trainingFile = &quot;trainingSet.txt&quot; testingFile = &quot;testSet.txt&quot; . Requirement already satisfied: seaborn in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (0.11.1) Requirement already satisfied: pandas&gt;=0.23 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from seaborn) (0.25.3) Requirement already satisfied: matplotlib&gt;=2.2 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from seaborn) (3.1.1) Requirement already satisfied: numpy&gt;=1.15 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from seaborn) (1.17.1) Requirement already satisfied: scipy&gt;=1.0 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from seaborn) (1.3.2) Requirement already satisfied: pytz&gt;=2017.2 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from pandas&gt;=0.23-&gt;seaborn) (2019.3) Requirement already satisfied: python-dateutil&gt;=2.6.1 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from pandas&gt;=0.23-&gt;seaborn) (2.8.1) Requirement already satisfied: kiwisolver&gt;=1.0.1 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from matplotlib&gt;=2.2-&gt;seaborn) (1.1.0) Requirement already satisfied: cycler&gt;=0.10 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from matplotlib&gt;=2.2-&gt;seaborn) (0.10.0) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from matplotlib&gt;=2.2-&gt;seaborn) (2.4.5) Requirement already satisfied: six&gt;=1.5 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from python-dateutil&gt;=2.6.1-&gt;pandas&gt;=0.23-&gt;seaborn) (1.12.0) Requirement already satisfied: setuptools in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from kiwisolver&gt;=1.0.1-&gt;matplotlib&gt;=2.2-&gt;seaborn) (39.0.1) You are using pip version 10.0.1, however version 20.3.3 is available. You should consider upgrading via the &#39;pip install --upgrade pip&#39; command. . . Getting our data&#160; . Below is a definition of getData, a basic function to pull from the trainingSet.txt and testSet.txt. The data that we&#39;re using for this example is a set of reviews written by users on Yelp, classified as positive (1) or negative (0).  . We open the file, create temporary arrays, and pull from the file line by line. . Open the cell if you&#39;d like to peek into what the function looks like. . def getData(fileName): f = open(fileName) file = f.readlines() sentences = [] sentiments = [] for line in file: sentence, sentiment = line.split(&#39; t&#39;) sentences.append(sentence.strip()) sentiments.append(int(sentiment.strip())) # Sentiment in {0,1} return sentences, np.array(sentiments) . . trainingSentences, trainingLabels = getData(trainingFile) testingSentences, testingLabels = getData(testingFile) . Let&#39;s take a peek at what this data looks like: . f = open(&quot;trainingSet.txt&quot;) file = f.readlines() sentences = [] sentiments = [] for line in file: sentence, sentiment = line.split(&#39; t&#39;) sentences.append(sentence.strip()) sentiments.append(int(sentiment.strip())) print(&quot;Sample sentences:&quot;) pprint(sentences[:10]) print(&quot;Corresponding sentiments:&quot;) pprint(sentiments[:10]) . . Sample sentences: [&#39;Wow... Loved this place.&#39;, &#39;Not tasty and the texture was just nasty.&#39;, &#39;Stopped by during the late May bank holiday off Rick Steve recommendation &#39; &#39;and loved it.&#39;, &#39;The selection on the menu was great and so were the prices.&#39;, &#39;Now I am getting angry and I want my damn pho.&#39;, &#34;Honeslty it didn&#39;t taste THAT fresh.)&#34;, &#39;The potatoes were like rubber and you could tell they had been made up ahead &#39; &#39;of time being kept under a warmer.&#39;, &#39;The fries were great too.&#39;, &#39;A great touch.&#39;, &#39;Service was very prompt.&#39;] Corresponding sentiments: [1, 0, 1, 1, 0, 0, 0, 1, 1, 1] . Pre-processing our data&#160; . We need to modify these sentences by tokenizing them into individual strings (word by word) so that we can feed our model individual words and their associated sentiment (negative / positive). . def preProcess(sentences): def cleanText(text): # Make lower case text = text.lower() # Replace non-text characters with spaces nonText = string.punctuation + (&quot;&quot;) text = text.translate(str.maketrans(nonText, &#39; &#39; * (len(nonText)))) # Split sentences into individual words - tokenize words = text.split() return words return list(map(cleanText, sentences)) . trainingTokens = preProcess(trainingSentences) testingTokens = preProcess(testingSentences) . Let&#39;s look at what these tokenized sentences look like now: . print(&quot;Training tokens:&quot;) pprint(trainingTokens[:2]) print(&quot;Testing tokens:&quot;) pprint(testingTokens[:3]) . . Training token: [[&#39;wow&#39;, &#39;loved&#39;, &#39;this&#39;, &#39;place&#39;], [&#39;not&#39;, &#39;tasty&#39;, &#39;and&#39;, &#39;the&#39;, &#39;texture&#39;, &#39;was&#39;, &#39;just&#39;, &#39;nasty&#39;]] Testing tokens: [[&#39;crust&#39;, &#39;is&#39;, &#39;not&#39;, &#39;good&#39;], [&#39;would&#39;, &#39;not&#39;, &#39;go&#39;, &#39;back&#39;], [&#39;i&#39;, &#39;was&#39;, &#39;shocked&#39;, &#39;because&#39;, &#39;no&#39;, &#39;signs&#39;, &#39;indicate&#39;, &#39;cash&#39;, &#39;only&#39;]] . Vectorizing our data . Now that we have our sentences tokenized, notice how our training tokens are nested arrays. We want to pull them out of nested arrays and into just one general vocabulary list. . def getVocab(sentences): vocab = set() for sentence in sentences: for word in sentence: vocab.add(word) return sorted(vocab) . . vocabulary = getVocab(trainingTokens) . We can peek at our vocabulary list, an alphabetically sorted list of words, now at a random set of indices: . pprint(vocabulary[50:70]) . . [&#39;amount&#39;, &#39;an&#39;, &#39;and&#39;, &#39;angry&#39;, &#39;another&#39;, &#39;anticipated&#39;, &#39;any&#39;, &#39;anything&#39;, &#39;anytime&#39;, &#39;anyway&#39;, &#39;apologize&#39;, &#39;app&#39;, &#39;appalling&#39;, &#39;appetizers&#39;, &#39;apple&#39;, &#39;approval&#39;, &#39;are&#39;, &#39;area&#39;, &#39;aren&#39;, &#39;aria&#39;] . We want our arrays to actually be proper vectors to feed to our model, which we&#39;ll create below as well. This function, createVector transforms our arrays into vectors. . def createVector(vocab, sentences): indices = [] wordOccurrences = [] for sentenceIndex, sentence in enumerate(sentences): alreadyCounted = set() # Keep track of words so we don&#39;t double count. for word in sentence: if (word in vocab) and word not in alreadyCounted: # If we just want {0,1} for the presence of the word (bernoulli NB), # only count each word once. Otherwise (multinomial NB) count each # occurrence of the word. #which sentence, which word indices.append((sentenceIndex, vocab.index(word))) wordOccurrences.append(1) alreadyCounted.add(word) # Unzip rows = [row for row, _ in indices] columns = [column for _, column in indices] sentenceVectors = sparse.csr_matrix((wordOccurrences, (rows, columns)), dtype=int, shape=(len(sentences), len(vocab))) return sentenceVectors . training = createVector(vocabulary, trainingTokens) testing = createVector(vocabulary, testingTokens) . Our training and test data has gone through some transformation. Here&#39;s what the training data looks like now: . print(&quot;Training data:&quot;) print(training[:2]) . . (0, 694) 1 (0, 884) 1 (0, 1186) 1 (0, 1335) 1 (1, 52) 1 (1, 640) 1 (1, 768) 1 (1, 788) 1 (1, 1158) 1 (1, 1166) 1 (1, 1171) 1 (1, 1281) 1 . A Naive Bayes model . Creating and Training our Model . Below is our Naive Bayes classifier, which is the model we&#39;ve chosen to use for our sentiment analysis of restaurant reviews. . class NaiveBayesClassifier: def __init__(self): self.priorPositive = None # Probability that a review is positive self.priorNegative = None # Probability that a review is negative self.positiveLogConditionals = None self.negativeLogConditionals = None def computePriorProbabilities(self, labels): self.priorPositive = len([y for y in labels if y == 1]) / len(labels) self.priorNegative = 1 - self.priorPositive def computeConditionProbabilities(self, examples, labels, dirichlet=1): _, vocabularyLength = examples.shape # How many of each word are there in all of the positive reviews positiveCounts = np.array([dirichlet for _ in range(vocabularyLength)]) # How many of each word are there in all of the negative reviews negativeCounts = np.array([dirichlet for _ in range(vocabularyLength)]) # Here&#39;s how to iterate through a spare array coordinates = examples.tocoo() # Converted to a `coordinate` format for exampleIndex, featureIndex, observationCount in zip(coordinates.row, coordinates.col, coordinates.data): # For sentence {exampleIndex}, for word at index {featureIndex}, the word occurred {observationCount} times if labels[exampleIndex] == 1: positiveCounts[featureIndex] += observationCount else: negativeCounts[featureIndex] += observationCount # [!] Make sure to use the logs of the probabilities positiveReviewCount = len([y for y in labels if y == 1]) negativeReviewCount = len([y for y in labels if y == 0]) # We are using bernoulli NB (single occurance of a word) self.positiveLogConditionals = np.log(positiveCounts) - np.log(positiveReviewCount + dirichlet*2) self.negativeLogConditionals = np.log(negativeCounts) - np.log(negativeReviewCount + dirichlet*2) # This works for multinomial NB (multiple occurances of a word) # self.positiveLogConditionals = np.log(positiveCounts) - np.log(sum(positiveCounts)) # self.negativeLogConditionals = np.log(negativeCounts) - np.log(sum(negativeCounts)) # Calculate all of the parameters for making a naive bayes classification def fit(self, trainingExamples, trainingLabels): # Compute the probability of positive/negative review self.computePriorProbabilities(trainingLabels) # Compute self.computeConditionProbabilities(trainingExamples, trainingLabels) def computeLogPosteriors(self, sentence): return ((np.log(self.priorPositive) + sum(sentence * self.positiveLogConditionals)), (np.log(self.priorNegative) + sum(sentence * self.negativeLogConditionals))) # Have the model try predicting if a review if positive or negative def predict(self, examples): totalReviewCount, _ = examples.shape predictions = np.array([0 for _ in range(totalReviewCount)]) for index, sentence in enumerate(examples): logProbabilityPositive, logProbabilityNegative = self.computeLogPosteriors( sentence) predictions[index] = 1 if logProbabilityPositive &gt; logProbabilityNegative else 0 return predictions . Initialize an instance of model and begin to fit the model with our training data and corresponding labels. . nbClassifier = NaiveBayesClassifier() nbClassifier.fit(training, trainingLabels) . def accuracy(predictions, actual): return sum((predictions == actual)) / len(actual) . Let&#39;s take our model for a spin, using both the training set and the testing set. You may notice discrepencies in accuracy between training and testing - why is that? . trainingPredictions = nbClassifier.predict(training) testingPredictions = nbClassifier.predict(testing) . def accuracy_button(arg): print(&quot;Training accuracy:&quot;, accuracy(trainingPredictions, trainingLabels)) print(&quot;Testing accuracy:&quot;, accuracy(testingPredictions, testingLabels)) button_download = widgets.Button(description = &#39;Model Accuracy&#39;) button_download.on_click(accuracy_button) display(button_download) print(&quot;Training accuracy:&quot;, accuracy(trainingPredictions, trainingLabels)) print(&quot;Testing accuracy:&quot;, accuracy(testingPredictions, testingLabels)) . . Training accuracy: 0.9519038076152304 Testing accuracy: 0.7947686116700201 . Here&#39;s another way to visualize our results using a confusion matrix. . data = {&#39;Actual&#39;: testingLabels, &#39;Predicted&#39;: testingPredictions } df = pd.DataFrame(data, columns=[&#39;Actual&#39;,&#39;Predicted&#39;]) confusion_matrix = pd.crosstab(df[&#39;Actual&#39;], df[&#39;Predicted&#39;], rownames=[&#39;Actual&#39;], colnames=[&#39;Predicted&#39;]) ax = sns.heatmap(confusion_matrix, annot=True,cmap=&quot;YlGnBu&quot;) ax.set_ylim(2.0, 0) plt.title(&#39;Confusion Matrix of Testing&#39;) plt.show() .",
            "url": "https://laurajjiang.github.io/capstone-notebooks/2021/01/10/Text-Classification.html",
            "relUrl": "/2021/01/10/Text-Classification.html",
            "date": " • Jan 10, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://laurajjiang.github.io/capstone-notebooks/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://laurajjiang.github.io/capstone-notebooks/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://laurajjiang.github.io/capstone-notebooks/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://laurajjiang.github.io/capstone-notebooks/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}